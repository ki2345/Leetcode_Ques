// LeetCode 113
// Path Sum II -- Medium
// solved using recursion
public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        List<List<Integer>> res = new ArrayList<>();
        path_sum2(root, targetSum, new ArrayList(), res);
        return res;
    }
    private static void path_sum2(TreeNode root, int sum, List<Integer> list, List<List<Integer>> res){
        if(root == null)
            return;
        list.add(root.val);
        // checking for leaf node
        if(root.left == null && root.right == null && sum == root.val){
            res.add(list);
        }
        path_sum2(root.left, sum - root.val, new ArrayList<>(list), res);
        path_sum2(root.right, sum - root.val, new ArrayList<>(list), res);
    }
