//LeetCode 2360
//Longest Cycle in a Graph -- Hard
class Solution {
    public int longestCycle(int[] edges) {
        int[] indeg = new int[edges.length];
        for(int i=0;i<indeg.length;i++){
            if(edges[i] != -1){
                indeg[edges[i]]++;
            }
        }
        boolean[] vis = new boolean[edges.length];
        Queue<Integer> q = new LinkedList<>();
        for(int i=0;i<indeg.length;i++){
            if(indeg[i] == 0){
                q.add(i);
            }
        }
        while(!q.isEmpty()){
            int rv = q.poll();
            vis[rv] = true;
            int nbrs = edges[rv];
            if(nbrs != -1){
                indeg[nbrs]--;
                if(indeg[nbrs] == 0)
                    q.add(nbrs);
            }
        }
        //count wala loop
        int ans = -1;
        for(int i=0;i<vis.length;i++){
            if(!vis[i]){
                int count = 1;
                int nbrs = edges[i];
                vis[i] = true;
                while(nbrs != i){
                    vis[nbrs] = true;
                    count++;
                nbrs = edges[nbrs];
                }
                ans = Math.max(ans,count);
            }
        }
        return ans;
    } 
}
