//LeetCode 131
//Palindrome Partitioning -- Medium
class Solution {
    public List<List<String>> partition(String s) {
        List<List<String>> res = new ArrayList<>();
        List<String> list = new ArrayList<>();
        palindrome_partition(s, list, res);
        return res;
    }
    public static void palindrome_partition(String ques, List<String> list, List<List<String>> res){
        if(ques.length() == 0){
            //System.out.println(list);
            res.add(new ArrayList<>(list));
            return;
        }
        for(int cut=1;cut<=ques.length();cut++){
            String s = ques.substring(0, cut);
            if(isPalindrome(s)){
                list.add(s);
                palindrome_partition(ques.substring(cut), list, res);
                list.remove(list.size() -1);
            }
        }
    }
    public static boolean isPalindrome(String s){
        int i = 0;
        int j = s.length() - 1;
        while(i < j){
            if(s.charAt(i) != s.charAt(j))
                return false;
            i++;
            j--;
        }
        return true;
    }
}
