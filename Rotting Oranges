//LeetCode 994
// Rotting Oranges -- Medium
//using BFS because when we will use DFS , time complexity will increase
class Solution{
    class Pair{
        int sr; //starting row
        int sc; //starting column
        int time;
        Pair(int sr, int sc, int time){
            this.sr = sr;
            this.sc = sc;
            this.time = time;
        }
    }
    public int orangesRotting(int[][] grid) {
        Queue<Pair> q = new LinkedList<>(); //for ornages
        int count = 0;
        for(int i=0;i<grid.length;i++){
            for(int j=0;j<grid[0].length;j++){
                if(grid[i][j] == 2){
                    q.add(new Pair(i, j, 0));
                }
            }
        }
        int drow[] = {-1,0,1,0};
        int[] dcol = {0,1,0,-1};
        while(!q.isEmpty()){
            Pair or = q.poll();
            count = or.time;
            for(int i=0;i<4;i++){
                int nrow = or.sr + drow[i];
                int ncol = or.sc + dcol[i];
                if(nrow >= 0 && nrow < grid.length && ncol >= 0 && ncol < grid[0].length && grid[nrow][ncol] == 1){
                    grid[nrow][ncol] = 2;
                    q.add(new Pair(nrow,ncol,count+1));
                }
            }
        }
        for(int i=0;i<grid.length;i++){
            for(int j=0;j<grid[0].length;j++){
                if(grid[i][j] == 1)
                    return -1;
            }
        }
        return count;
    }
}
