//LeetCode 2316
//Count Unreachable Pairs of Nodes in an Undirected Graph -- Medium
class Solution {
    public long countPairs(int n, int[][] edges) {
        List<List<Integer>> al = new ArrayList<>();
        for(int i=0;i<n;i++){
            al.add(new ArrayList<>());
        }
        for(int i=0;i<edges.length;i++){
            al.get(edges[i][0]).add(edges[i][1]);
            al.get(edges[i][1]).add(edges[i][0]);
        }
        long sum = n;
        long res = 0;
        boolean[] vis = new boolean[n];
        for(int i=0;i<n;i++){
            if(!vis[i]){
                vis[i] = true;
                int count = bfs(vis,i,al,0);
                sum -= count;
                res += (sum * count);
            }
        }
        return res;
    }
    public int bfs(boolean[] vis,int i,List<List<Integer>> al,int count){
        Queue<Integer> q = new LinkedList<>();
        q.add(i);
        count++;
        while(!q.isEmpty()){
            int curr = q.poll();
            for(int vtx : al.get(curr)){
                if(!vis[vtx]){
                    q.add(vtx);
                    count++;
                    vis[vtx] = true;
                }
            }
        }
        return count;
    }
}
